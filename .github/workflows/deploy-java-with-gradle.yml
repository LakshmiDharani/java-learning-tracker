# ----------------------------------------------
# Workflow Name: Java CI with Gradle
# ----------------------------------------------
# This GitHub Actions workflow:
# - Triggers on push and pull request to the 'main' branch
# - Builds a Java project using Gradle
# - Runs unit tests
# - Build with Gradle Wrapper
# - Uploads build artifacts
# - Publishes the package
# - Notifies the team via email on success or failure
# ----------------------------------------------
name: Java CI with Gradle

# ----------------------------------------------
# Event triggers for workflow
# ----------------------------------------------
on:
  push:
    branches: [ "main" ]         # Trigger on push to 'main'
  pull_request:
    branches: [ "main" ]         # Trigger on PR to 'main'

# ----------------------------------------------
# Job block: Contains steps to run the workflow
# ----------------------------------------------
jobs:
  build:
    runs-on: ubuntu-latest       # GitHub-hosted runner (Linux)

    strategy:
      matrix:
        java-version: [17,21]       # Java version matrix (can extend to 11, 21, etc.)

    steps:
      # ----------------------------------------
      # Step 1: Checkout the source code
      # ----------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v3

      # ----------------------------------------
      # Step 2: Set up Java Development Kit (JDK)
      # ----------------------------------------
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}   # Set Java version from matrix
          distribution: 'temurin'                    # Use Eclipse Temurin distribution

      # ----------------------------------------
      # Step 3: Set up Gradle build environment
      # ----------------------------------------
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582  # v4.0.0

      # ----------------------------------------
      # Step 4: Build with Gradle Wrapper
      # ----------------------------------------
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Build with Gradle Wrapper
        run: ./gradlew build                         # Compiles the code and runs checks

      # ----------------------------------------
      # Step 4.1: Build Docker Image
      # ----------------------------------------
      - name: Build Docker Image
        run: docker build -t your-dockerhub-username/java-ci-app:${{ github.sha }} .

      # ----------------------------------------
      # Step 4.2: Log in to Docker Hub
      # ----------------------------------------
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ----------------------------------------
      # Step 4.3: Push Docker Image to Docker Hub
      # ----------------------------------------
      - name: Push Docker Image
        run: docker push your-dockerhub-username/java-ci-app:${{ github.sha }}

      # ----------------------------------------
      # Step 5: Upload build artifacts (e.g., JAR files)
      # ----------------------------------------
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Package
          path: build/libs                           # Path to built artifacts (JARs)

      # ----------------------------------------
      # Step 6: Publish package to a Maven repository
      # ----------------------------------------
      - name: Publish package
        run: ./gradlew publish
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}   # Maven Central credentials
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ----------------------------------------
      # Step 7: Run unit tests to validate build
      # ----------------------------------------
      - name: Run Unit Tests
        run: ./gradlew test                           # Executes all test cases

      # ----------------------------------------
      # Step 8: Send success notification email
      # ----------------------------------------
      - name: Send Success Email
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: ‚úÖ GitHub Actions Build Successful
          body: |
            ‚úÖ The Java CI pipeline has completed successfully.
            Workflow: Java CI with Gradle
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
          to: you@example.com, team@example.com
          from: GitHub Actions <${{ secrets.EMAIL_USERNAME }}>

      # ----------------------------------------
      # Step 9: Send failure notification email
      # ----------------------------------------
      - name: Send Failure Email
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: ‚ùå GitHub Actions Build Failed
          body: |
            üö® The Java CI pipeline has failed.
            Workflow: Java CI with Gradle
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
          to: you@example.com, team@example.com
          from: GitHub Actions <${{ secrets.EMAIL_USERNAME }}>
